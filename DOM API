        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======|||    JS в Браузере                    |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
https://ru.hexlet.io/blog/posts/rukovodstvo-kak-uvelichit-skorost-zagruzki-stranitsy-so-skriptami-s-pomoschyu-defer-i-async
https://ru.hexlet.io/blog/posts/breakpoints-js

<script>
</script>

внешние скрипты
<script src="/assets/application.js"></script>

Element: html-элемент
Attr: атрибут html-элемента
Document: корневой узел html-документа

        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======|||    Глобальный объект Window          |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
https://developer.mozilla.org/ru/docs/Web/API/Window

// Открывает новую вкладку
window.open();

// Возвращает объект, содержащий информацию об экране
window.screen;
// Screen {availWidth: 1280, availHeight: 775, width: 1280, height: 800, …}
// Перемещает страницу до точки (x-coord, y-coord)
window.scrollTo(0, 1000);
// Видимые высота и ширина страницы
// Меняются при изменении размеров окна
window.innerHeight;
window.innerWidth;

создание глобальной переменной:
window.myvar = 'Dont do it in real life';


        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======|||    BOM-объекты                       |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

https://developer.mozilla.org/ru/docs/Web/API/Navigator
https://developer.mozilla.org/ru/docs/Web/API/Location
https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/User-Agent

BOM (Browser Object Model) — это набор глобальных объектов, 
которые управляют поведением браузера. Все они также находятся внутри window.

переход на страницу
location.href = 'https://hexlet.io' // текукщая страница

TEST:
Реализуйте и экспортируйте по умолчанию функцию. 
При вызове она должна делать переход на страницу и возвращать начальную часть строки 
с именем совместимого браузера (User agent) и текущей открытой страницей.
Адрес страницы передается через параметр, а результат должен быть в виде строки вида 'Mozilla/5.0 https://hexlet.io'. 
Версия браузера записывается после косой черты, адрес страницы после пробела:

export default (href) => {
  window.location.href = href;
  const { userAgent } = window.navigator;
  const [agentName] = userAgent.split(' ');
  return `${agentName} ${window.location.href}`;
};

        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======|||               DOM                   |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

// Выводим содержимое тега <body>
console.log(document.body.innerHTML);

// Этот заголовок заменит всю страницу (тег body)
document.body.innerHTML = '<h1>For Hexlet!</h1>';

TEST: переводим строку текста в <p>
const text = document.body.innerHTML.trim();
const lines = text.split('\n');
const tags = lines.map((line) => `<p>${line.trim()}</p>`);
document.body.innerHTML = tags.join('\n');


        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======|||       Навигация по DOM-дереву       |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

https://developer.mozilla.org/ru/docs/Web/API/Node
https://developer.mozilla.org/en-US/docs/Web/API/Element/tagName

узлы делятся на два типа:
Листовые — не содержат внутри себя других узлов
Внутренние – у них есть узлы

const html = document.documentElement;
// Свойство tagName узла содержит имя тега в верхнем регистре
console.log(html.tagName); // => 'HTML'

// Содержимое тега HTML в виде узлов DOM-дерева
// Текст тоже представлен узлом
html.childNodes; // [head, text, body]

// Потому что head выше body
html.firstChild; // <head>...</head>
html.lastChild; // <body>...</body>

// Второй узел, обращение по индексу
html.childNodes[1]; // #text

Теги <body> и <head> всегда присутствуют внутри документа, 
поэтому можно вынести их на уровень объекта document для более простого доступа:
document.head;
document.body;

По дереву можно не только спускаться, но и подниматься:
// Родитель body это html
document.documentElement === document.body.parentNode; // true
document.body === document.body.childNodes[2].parentNode; // true

ПЕРЕВОДИМ В МАССИВ
const list = Array.from(nodes);
// Теперь у нас обычный массив и доступные методы, например, filter
// Можем отфильтровать нужные элементы
const filtered = list.filter((item) => item.textContent.includes('Навигация по DOM-дереву'));
// И извлечь из них данные, например, имена тегов
const filteredTags = filtered.map((item) => item.tagName);
console.log(filteredTags); // => ['HEAD', 'BODY']

// Самый простой способ посмотреть тип
document.body.toString(); // "[object HTMLBodyElement]"
document.body instanceof HTMLBodyElement; // true

TEST: парсинг сайта по тегу P

import extractData from "./extractor.js";
const data = extractData(document.documentElement);
console.log(data);

const extractData = (ref) => {
  const result = [];
  const nodes = ref.parentNode.body.children
  const list = Array.from(nodes);
  //console.log(list);
  //list.forEach((el) => console.log(el.tagName));
  const data = list.filter((element) => (element.tagName === 'P'));
  return data.map((element) => (element.innerHTML.trim()))
};

        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======||| Декларативный поиск по DOM-дереву   |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Selectors

Это самый простой вариант поиска:
<p id="content">Это параграф</p>
const el = document.getElementById('content'); ===================> По АйДи


// Поиск по всему дереву
// Возвращаются все элементы с таким классом, причем они могут быть совершенно разными
const collection = document.getElementsByClassName('row');
// Этот метод позволяет искать не только в целом документе,
// но и среди потомков любого элемента
el.getElementsByClassName('row');

document.getElementsByTagName('span');
// Поиск всех элементов
document.getElementsByTagName('*');
// Поиск среди потомков el
el.getElementsByTagName('span');

ПОИСК по СЕЛЕКТОРУ ====================================================> По селектору
https://developer.mozilla.org/ru/docs/Web/CSS/CSS_Selectors
<ul id="menu">
  <li class="odd"><span>Первый</span> пункт</li>
  <li>Второй</li>
  <li class="odd"><span>Третий</span> пункт</li>
</ul>
// Этот код возвращает первый найденный элемент по указанному селектору
// Ищем элемент с id=menu
const ul = document.querySelector('#menu');
// Все спаны, вложенные в теги с классом .odd
const spans = ul.querySelectorAll('.odd > span');

 ТЕСТ:Нам нужно извлечь данные с фиксированной структурой.

  // BEGIN
  const root = document.querySelector('.content');

  const categoryTitleElement = root.querySelector('h1');
  const categoryTitle = categoryTitleElement.innerHTML;
  const categoryDescriptionElement = root.querySelector('.description');
  const categoryDescription = categoryDescriptionElement.innerHTML;

  const itemElements = root.querySelectorAll('.links div');
  const items = Array.from(itemElements).map((element) => {
    const titleElement = element.querySelector('a');
    const descriptionElement = element.querySelector('p');

    return {
      title: titleElement.innerHTML,
      description: descriptionElement.innerHTML,
    };
  });

  return {
    title: categoryTitle,
    description: categoryDescription,
    items,
  };
  // END

        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======|||    Манипулирование DOM-деревом      |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


const body = document.body;
console.log(body);
// <ul><li>item 1</li><li>item 2</li></ul>
body.innerHTML = '<b>make</b> love';
console.log(body.innerHTML);
// <b>make</b> love
console.log(body.childNodes);
// [b, text]

document.body.textContent = '<b>make</b> love';
console.log(document.body.innerHTML);
// Все специальные символы оказываются замененными
// "&lt;b&gt;make&lt;/b&gt; love"

// Создаем текстовый узел
const textNode = document.createTextNode('life is life');

// Создаем элемент p
const pEl = document.createElement('p');

// Добавляем textNode в конец списка childNodes элемента pEl
pEl.append(textNode);
// pEl.textContent = 'life is life';

const el = document.createElement('div');
el.append(pEl);

console.log(el);
// <div><p>life is life</p></div>

Старый API
Описанные выше функции появились не так давно. 
Большая часть кода написана с использованием других функций, список которых ниже:

parent.appendChild(el) – добавляет el в конец списка потомков
parent.insertBefore(el, nextElSibling) – добавляет el в список потомков parent перед nextElSibling
parent.removeChild(el) – удаляет el из потомков parent
parent.replaceChild(newEl, el) – заменяет el на newEl

var articleDiv = document.querySelector("div.content");
// создаем элемент
var elem = document.createElement("h2");
// создаем для него текст
var elemText = document.createTextNode("Привет мир");
// добавляем текст в элемент в качестве дочернего элемента
elem.appendChild(elemText);
// добавляем элемент в блок div
articleDiv.appendChild(elem);


        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
<======|||    Управление узлами DOM            |||=======>
        -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model





























